import {
  __commonJS
} from "./chunk-EQCVQC35.js";

// node_modules/emoji-flags/data.json
var require_data = __commonJS({
  "node_modules/emoji-flags/data.json"(exports, module) {
    module.exports = [
      {
        code: "AD",
        emoji: "ðŸ‡¦ðŸ‡©",
        unicode: "U+1F1E6 U+1F1E9",
        name: "Andorra",
        title: "flag for Andorra",
        dialCode: "+376"
      },
      {
        code: "AE",
        emoji: "ðŸ‡¦ðŸ‡ª",
        unicode: "U+1F1E6 U+1F1EA",
        name: "United Arab Emirates",
        title: "flag for United Arab Emirates",
        dialCode: "+971"
      },
      {
        code: "AF",
        emoji: "ðŸ‡¦ðŸ‡«",
        unicode: "U+1F1E6 U+1F1EB",
        name: "Afghanistan",
        title: "flag for Afghanistan",
        dialCode: "+93"
      },
      {
        code: "AG",
        emoji: "ðŸ‡¦ðŸ‡¬",
        unicode: "U+1F1E6 U+1F1EC",
        name: "Antigua and Barbuda",
        title: "flag for Antigua and Barbuda",
        dialCode: "+1268"
      },
      {
        code: "AI",
        emoji: "ðŸ‡¦ðŸ‡®",
        unicode: "U+1F1E6 U+1F1EE",
        name: "Anguilla",
        title: "flag for Anguilla",
        dialCode: "+1 264"
      },
      {
        code: "AL",
        emoji: "ðŸ‡¦ðŸ‡±",
        unicode: "U+1F1E6 U+1F1F1",
        name: "Albania",
        title: "flag for Albania",
        dialCode: "+355"
      },
      {
        code: "AM",
        emoji: "ðŸ‡¦ðŸ‡²",
        unicode: "U+1F1E6 U+1F1F2",
        name: "Armenia",
        title: "flag for Armenia",
        dialCode: "+374"
      },
      {
        code: "AO",
        emoji: "ðŸ‡¦ðŸ‡´",
        unicode: "U+1F1E6 U+1F1F4",
        name: "Angola",
        title: "flag for Angola",
        dialCode: "+244"
      },
      {
        code: "AQ",
        emoji: "ðŸ‡¦ðŸ‡¶",
        unicode: "U+1F1E6 U+1F1F6",
        name: "Antarctica",
        title: "flag for Antarctica",
        dialCode: null
      },
      {
        code: "AR",
        emoji: "ðŸ‡¦ðŸ‡·",
        unicode: "U+1F1E6 U+1F1F7",
        name: "Argentina",
        title: "flag for Argentina",
        dialCode: "+54"
      },
      {
        code: "AS",
        emoji: "ðŸ‡¦ðŸ‡¸",
        unicode: "U+1F1E6 U+1F1F8",
        name: "American Samoa",
        title: "flag for American Samoa",
        dialCode: "+1 684"
      },
      {
        code: "AT",
        emoji: "ðŸ‡¦ðŸ‡¹",
        unicode: "U+1F1E6 U+1F1F9",
        name: "Austria",
        title: "flag for Austria",
        dialCode: "+43"
      },
      {
        code: "AU",
        emoji: "ðŸ‡¦ðŸ‡º",
        unicode: "U+1F1E6 U+1F1FA",
        name: "Australia",
        title: "flag for Australia",
        dialCode: "+61"
      },
      {
        code: "AW",
        emoji: "ðŸ‡¦ðŸ‡¼",
        unicode: "U+1F1E6 U+1F1FC",
        name: "Aruba",
        title: "flag for Aruba",
        dialCode: "+297"
      },
      {
        code: "AX",
        emoji: "ðŸ‡¦ðŸ‡½",
        unicode: "U+1F1E6 U+1F1FD",
        name: "Ã…land Islands",
        title: "flag for Ã…land Islands",
        dialCode: ""
      },
      {
        code: "AZ",
        emoji: "ðŸ‡¦ðŸ‡¿",
        unicode: "U+1F1E6 U+1F1FF",
        name: "Azerbaijan",
        title: "flag for Azerbaijan",
        dialCode: "+994"
      },
      {
        code: "BA",
        emoji: "ðŸ‡§ðŸ‡¦",
        unicode: "U+1F1E7 U+1F1E6",
        name: "Bosnia and Herzegovina",
        title: "flag for Bosnia and Herzegovina",
        dialCode: "+387"
      },
      {
        code: "BB",
        emoji: "ðŸ‡§ðŸ‡§",
        unicode: "U+1F1E7 U+1F1E7",
        name: "Barbados",
        title: "flag for Barbados",
        dialCode: "+1 246"
      },
      {
        code: "BD",
        emoji: "ðŸ‡§ðŸ‡©",
        unicode: "U+1F1E7 U+1F1E9",
        name: "Bangladesh",
        title: "flag for Bangladesh",
        dialCode: "+880"
      },
      {
        code: "BE",
        emoji: "ðŸ‡§ðŸ‡ª",
        unicode: "U+1F1E7 U+1F1EA",
        name: "Belgium",
        title: "flag for Belgium",
        dialCode: "+32"
      },
      {
        code: "BF",
        emoji: "ðŸ‡§ðŸ‡«",
        unicode: "U+1F1E7 U+1F1EB",
        name: "Burkina Faso",
        title: "flag for Burkina Faso",
        dialCode: "+226"
      },
      {
        code: "BG",
        emoji: "ðŸ‡§ðŸ‡¬",
        unicode: "U+1F1E7 U+1F1EC",
        name: "Bulgaria",
        title: "flag for Bulgaria",
        dialCode: "+359"
      },
      {
        code: "BH",
        emoji: "ðŸ‡§ðŸ‡­",
        unicode: "U+1F1E7 U+1F1ED",
        name: "Bahrain",
        title: "flag for Bahrain",
        dialCode: "+973"
      },
      {
        code: "BI",
        emoji: "ðŸ‡§ðŸ‡®",
        unicode: "U+1F1E7 U+1F1EE",
        name: "Burundi",
        title: "flag for Burundi",
        dialCode: "+257"
      },
      {
        code: "BJ",
        emoji: "ðŸ‡§ðŸ‡¯",
        unicode: "U+1F1E7 U+1F1EF",
        name: "Benin",
        title: "flag for Benin",
        dialCode: "+229"
      },
      {
        code: "BL",
        emoji: "ðŸ‡§ðŸ‡±",
        unicode: "U+1F1E7 U+1F1F1",
        name: "Saint BarthÃ©lemy",
        title: "flag for Saint BarthÃ©lemy",
        dialCode: "+590"
      },
      {
        code: "BM",
        emoji: "ðŸ‡§ðŸ‡²",
        unicode: "U+1F1E7 U+1F1F2",
        name: "Bermuda",
        title: "flag for Bermuda",
        dialCode: "+1 441"
      },
      {
        code: "BN",
        emoji: "ðŸ‡§ðŸ‡³",
        unicode: "U+1F1E7 U+1F1F3",
        name: "Brunei Darussalam",
        title: "flag for Brunei Darussalam",
        dialCode: "+673"
      },
      {
        code: "BO",
        emoji: "ðŸ‡§ðŸ‡´",
        unicode: "U+1F1E7 U+1F1F4",
        name: "Bolivia",
        title: "flag for Bolivia",
        dialCode: "+591"
      },
      {
        code: "BQ",
        emoji: "ðŸ‡§ðŸ‡¶",
        unicode: "U+1F1E7 U+1F1F6",
        name: "Bonaire, Sint Eustatius and Saba",
        title: "flag for Bonaire, Sint Eustatius and Saba"
      },
      {
        code: "BR",
        emoji: "ðŸ‡§ðŸ‡·",
        unicode: "U+1F1E7 U+1F1F7",
        name: "Brazil",
        title: "flag for Brazil",
        dialCode: "+55"
      },
      {
        code: "BS",
        emoji: "ðŸ‡§ðŸ‡¸",
        unicode: "U+1F1E7 U+1F1F8",
        name: "Bahamas",
        title: "flag for Bahamas",
        dialCode: "+1 242"
      },
      {
        code: "BT",
        emoji: "ðŸ‡§ðŸ‡¹",
        unicode: "U+1F1E7 U+1F1F9",
        name: "Bhutan",
        title: "flag for Bhutan",
        dialCode: "+975"
      },
      {
        code: "BV",
        emoji: "ðŸ‡§ðŸ‡»",
        unicode: "U+1F1E7 U+1F1FB",
        name: "Bouvet Island",
        title: "flag for Bouvet Island"
      },
      {
        code: "BW",
        emoji: "ðŸ‡§ðŸ‡¼",
        unicode: "U+1F1E7 U+1F1FC",
        name: "Botswana",
        title: "flag for Botswana",
        dialCode: "+267"
      },
      {
        code: "BY",
        emoji: "ðŸ‡§ðŸ‡¾",
        unicode: "U+1F1E7 U+1F1FE",
        name: "Belarus",
        title: "flag for Belarus",
        dialCode: "+375"
      },
      {
        code: "BZ",
        emoji: "ðŸ‡§ðŸ‡¿",
        unicode: "U+1F1E7 U+1F1FF",
        name: "Belize",
        title: "flag for Belize",
        dialCode: "+501"
      },
      {
        code: "CA",
        emoji: "ðŸ‡¨ðŸ‡¦",
        unicode: "U+1F1E8 U+1F1E6",
        name: "Canada",
        title: "flag for Canada",
        dialCode: "+1"
      },
      {
        code: "CC",
        emoji: "ðŸ‡¨ðŸ‡¨",
        unicode: "U+1F1E8 U+1F1E8",
        name: "Cocos (Keeling) Islands",
        title: "flag for Cocos (Keeling) Islands",
        dialCode: "+61"
      },
      {
        code: "CD",
        emoji: "ðŸ‡¨ðŸ‡©",
        unicode: "U+1F1E8 U+1F1E9",
        name: "Congo",
        title: "flag for Congo",
        dialCode: "+243"
      },
      {
        code: "CF",
        emoji: "ðŸ‡¨ðŸ‡«",
        unicode: "U+1F1E8 U+1F1EB",
        name: "Central African Republic",
        title: "flag for Central African Republic",
        dialCode: "+236"
      },
      {
        code: "CG",
        emoji: "ðŸ‡¨ðŸ‡¬",
        unicode: "U+1F1E8 U+1F1EC",
        name: "Congo",
        title: "flag for Congo",
        dialCode: "+242"
      },
      {
        code: "CH",
        emoji: "ðŸ‡¨ðŸ‡­",
        unicode: "U+1F1E8 U+1F1ED",
        name: "Switzerland",
        title: "flag for Switzerland",
        dialCode: "+41"
      },
      {
        code: "CI",
        emoji: "ðŸ‡¨ðŸ‡®",
        unicode: "U+1F1E8 U+1F1EE",
        name: "CÃ´te D'Ivoire",
        title: "flag for CÃ´te D'Ivoire",
        dialCode: "+225"
      },
      {
        code: "CK",
        emoji: "ðŸ‡¨ðŸ‡°",
        unicode: "U+1F1E8 U+1F1F0",
        name: "Cook Islands",
        title: "flag for Cook Islands",
        dialCode: "+682"
      },
      {
        code: "CL",
        emoji: "ðŸ‡¨ðŸ‡±",
        unicode: "U+1F1E8 U+1F1F1",
        name: "Chile",
        title: "flag for Chile",
        dialCode: "+56"
      },
      {
        code: "CM",
        emoji: "ðŸ‡¨ðŸ‡²",
        unicode: "U+1F1E8 U+1F1F2",
        name: "Cameroon",
        title: "flag for Cameroon",
        dialCode: "+237"
      },
      {
        code: "CN",
        emoji: "ðŸ‡¨ðŸ‡³",
        unicode: "U+1F1E8 U+1F1F3",
        name: "China",
        title: "flag for China",
        dialCode: "+86"
      },
      {
        code: "CO",
        emoji: "ðŸ‡¨ðŸ‡´",
        unicode: "U+1F1E8 U+1F1F4",
        name: "Colombia",
        title: "flag for Colombia",
        dialCode: "+57"
      },
      {
        code: "CR",
        emoji: "ðŸ‡¨ðŸ‡·",
        unicode: "U+1F1E8 U+1F1F7",
        name: "Costa Rica",
        title: "flag for Costa Rica",
        dialCode: "+506"
      },
      {
        code: "CU",
        emoji: "ðŸ‡¨ðŸ‡º",
        unicode: "U+1F1E8 U+1F1FA",
        name: "Cuba",
        title: "flag for Cuba",
        dialCode: "+53"
      },
      {
        code: "CV",
        emoji: "ðŸ‡¨ðŸ‡»",
        unicode: "U+1F1E8 U+1F1FB",
        name: "Cape Verde",
        title: "flag for Cape Verde",
        dialCode: "+238"
      },
      {
        code: "CW",
        emoji: "ðŸ‡¨ðŸ‡¼",
        unicode: "U+1F1E8 U+1F1FC",
        name: "CuraÃ§ao",
        title: "flag for CuraÃ§ao"
      },
      {
        code: "CX",
        emoji: "ðŸ‡¨ðŸ‡½",
        unicode: "U+1F1E8 U+1F1FD",
        name: "Christmas Island",
        title: "flag for Christmas Island",
        dialCode: "+61"
      },
      {
        code: "CY",
        emoji: "ðŸ‡¨ðŸ‡¾",
        unicode: "U+1F1E8 U+1F1FE",
        name: "Cyprus",
        title: "flag for Cyprus",
        dialCode: "+537"
      },
      {
        code: "CZ",
        emoji: "ðŸ‡¨ðŸ‡¿",
        unicode: "U+1F1E8 U+1F1FF",
        name: "Czech Republic",
        title: "flag for Czech Republic",
        dialCode: "+420"
      },
      {
        code: "DE",
        emoji: "ðŸ‡©ðŸ‡ª",
        unicode: "U+1F1E9 U+1F1EA",
        name: "Germany",
        title: "flag for Germany",
        dialCode: "+49"
      },
      {
        code: "DJ",
        emoji: "ðŸ‡©ðŸ‡¯",
        unicode: "U+1F1E9 U+1F1EF",
        name: "Djibouti",
        title: "flag for Djibouti",
        dialCode: "+253"
      },
      {
        code: "DK",
        emoji: "ðŸ‡©ðŸ‡°",
        unicode: "U+1F1E9 U+1F1F0",
        name: "Denmark",
        title: "flag for Denmark",
        dialCode: "+45"
      },
      {
        code: "DM",
        emoji: "ðŸ‡©ðŸ‡²",
        unicode: "U+1F1E9 U+1F1F2",
        name: "Dominica",
        title: "flag for Dominica",
        dialCode: "+1 767"
      },
      {
        code: "DO",
        emoji: "ðŸ‡©ðŸ‡´",
        unicode: "U+1F1E9 U+1F1F4",
        name: "Dominican Republic",
        title: "flag for Dominican Republic",
        dialCode: "+1 849"
      },
      {
        code: "DZ",
        emoji: "ðŸ‡©ðŸ‡¿",
        unicode: "U+1F1E9 U+1F1FF",
        name: "Algeria",
        title: "flag for Algeria",
        dialCode: "+213"
      },
      {
        code: "EC",
        emoji: "ðŸ‡ªðŸ‡¨",
        unicode: "U+1F1EA U+1F1E8",
        name: "Ecuador",
        title: "flag for Ecuador",
        dialCode: "+593"
      },
      {
        code: "EE",
        emoji: "ðŸ‡ªðŸ‡ª",
        unicode: "U+1F1EA U+1F1EA",
        name: "Estonia",
        title: "flag for Estonia",
        dialCode: "+372"
      },
      {
        code: "EG",
        emoji: "ðŸ‡ªðŸ‡¬",
        unicode: "U+1F1EA U+1F1EC",
        name: "Egypt",
        title: "flag for Egypt",
        dialCode: "+20"
      },
      {
        code: "EH",
        emoji: "ðŸ‡ªðŸ‡­",
        unicode: "U+1F1EA U+1F1ED",
        name: "Western Sahara",
        title: "flag for Western Sahara"
      },
      {
        code: "ER",
        emoji: "ðŸ‡ªðŸ‡·",
        unicode: "U+1F1EA U+1F1F7",
        name: "Eritrea",
        title: "flag for Eritrea",
        dialCode: "+291"
      },
      {
        code: "ES",
        emoji: "ðŸ‡ªðŸ‡¸",
        unicode: "U+1F1EA U+1F1F8",
        name: "Spain",
        title: "flag for Spain",
        dialCode: "+34"
      },
      {
        code: "ET",
        emoji: "ðŸ‡ªðŸ‡¹",
        unicode: "U+1F1EA U+1F1F9",
        name: "Ethiopia",
        title: "flag for Ethiopia",
        dialCode: "+251"
      },
      {
        code: "EU",
        emoji: "ðŸ‡ªðŸ‡º",
        unicode: "U+1F1EA U+1F1FA",
        name: "European Union",
        title: "flag for European Union"
      },
      {
        code: "FI",
        emoji: "ðŸ‡«ðŸ‡®",
        unicode: "U+1F1EB U+1F1EE",
        name: "Finland",
        title: "flag for Finland",
        dialCode: "+358"
      },
      {
        code: "FJ",
        emoji: "ðŸ‡«ðŸ‡¯",
        unicode: "U+1F1EB U+1F1EF",
        name: "Fiji",
        title: "flag for Fiji",
        dialCode: "+679"
      },
      {
        code: "FK",
        emoji: "ðŸ‡«ðŸ‡°",
        unicode: "U+1F1EB U+1F1F0",
        name: "Falkland Islands (Malvinas)",
        title: "flag for Falkland Islands (Malvinas)",
        dialCode: "+500"
      },
      {
        code: "FM",
        emoji: "ðŸ‡«ðŸ‡²",
        unicode: "U+1F1EB U+1F1F2",
        name: "Micronesia",
        title: "flag for Micronesia",
        dialCode: "+691"
      },
      {
        code: "FO",
        emoji: "ðŸ‡«ðŸ‡´",
        unicode: "U+1F1EB U+1F1F4",
        name: "Faroe Islands",
        title: "flag for Faroe Islands",
        dialCode: "+298"
      },
      {
        code: "FR",
        emoji: "ðŸ‡«ðŸ‡·",
        unicode: "U+1F1EB U+1F1F7",
        name: "France",
        title: "flag for France",
        dialCode: "+33"
      },
      {
        code: "GA",
        emoji: "ðŸ‡¬ðŸ‡¦",
        unicode: "U+1F1EC U+1F1E6",
        name: "Gabon",
        title: "flag for Gabon",
        dialCode: "+241"
      },
      {
        code: "GB",
        emoji: "ðŸ‡¬ðŸ‡§",
        unicode: "U+1F1EC U+1F1E7",
        name: "United Kingdom",
        title: "flag for United Kingdom",
        dialCode: "+44"
      },
      {
        code: "GD",
        emoji: "ðŸ‡¬ðŸ‡©",
        unicode: "U+1F1EC U+1F1E9",
        name: "Grenada",
        title: "flag for Grenada",
        dialCode: "+1 473"
      },
      {
        code: "GE",
        emoji: "ðŸ‡¬ðŸ‡ª",
        unicode: "U+1F1EC U+1F1EA",
        name: "Georgia",
        title: "flag for Georgia",
        dialCode: "+995"
      },
      {
        code: "GF",
        emoji: "ðŸ‡¬ðŸ‡«",
        unicode: "U+1F1EC U+1F1EB",
        name: "French Guiana",
        title: "flag for French Guiana",
        dialCode: "+594"
      },
      {
        code: "GG",
        emoji: "ðŸ‡¬ðŸ‡¬",
        unicode: "U+1F1EC U+1F1EC",
        name: "Guernsey",
        title: "flag for Guernsey",
        dialCode: "+44"
      },
      {
        code: "GH",
        emoji: "ðŸ‡¬ðŸ‡­",
        unicode: "U+1F1EC U+1F1ED",
        name: "Ghana",
        title: "flag for Ghana",
        dialCode: "+233"
      },
      {
        code: "GI",
        emoji: "ðŸ‡¬ðŸ‡®",
        unicode: "U+1F1EC U+1F1EE",
        name: "Gibraltar",
        title: "flag for Gibraltar",
        dialCode: "+350"
      },
      {
        code: "GL",
        emoji: "ðŸ‡¬ðŸ‡±",
        unicode: "U+1F1EC U+1F1F1",
        name: "Greenland",
        title: "flag for Greenland",
        dialCode: "+299"
      },
      {
        code: "GM",
        emoji: "ðŸ‡¬ðŸ‡²",
        unicode: "U+1F1EC U+1F1F2",
        name: "Gambia",
        title: "flag for Gambia",
        dialCode: "+220"
      },
      {
        code: "GN",
        emoji: "ðŸ‡¬ðŸ‡³",
        unicode: "U+1F1EC U+1F1F3",
        name: "Guinea",
        title: "flag for Guinea",
        dialCode: "+224"
      },
      {
        code: "GP",
        emoji: "ðŸ‡¬ðŸ‡µ",
        unicode: "U+1F1EC U+1F1F5",
        name: "Guadeloupe",
        title: "flag for Guadeloupe",
        dialCode: "+590"
      },
      {
        code: "GQ",
        emoji: "ðŸ‡¬ðŸ‡¶",
        unicode: "U+1F1EC U+1F1F6",
        name: "Equatorial Guinea",
        title: "flag for Equatorial Guinea",
        dialCode: "+240"
      },
      {
        code: "GR",
        emoji: "ðŸ‡¬ðŸ‡·",
        unicode: "U+1F1EC U+1F1F7",
        name: "Greece",
        title: "flag for Greece",
        dialCode: "+30"
      },
      {
        code: "GS",
        emoji: "ðŸ‡¬ðŸ‡¸",
        unicode: "U+1F1EC U+1F1F8",
        name: "South Georgia",
        title: "flag for South Georgia",
        dialCode: "+500"
      },
      {
        code: "GT",
        emoji: "ðŸ‡¬ðŸ‡¹",
        unicode: "U+1F1EC U+1F1F9",
        name: "Guatemala",
        title: "flag for Guatemala",
        dialCode: "+502"
      },
      {
        code: "GU",
        emoji: "ðŸ‡¬ðŸ‡º",
        unicode: "U+1F1EC U+1F1FA",
        name: "Guam",
        title: "flag for Guam",
        dialCode: "+1 671"
      },
      {
        code: "GW",
        emoji: "ðŸ‡¬ðŸ‡¼",
        unicode: "U+1F1EC U+1F1FC",
        name: "Guinea-Bissau",
        title: "flag for Guinea-Bissau",
        dialCode: "+245"
      },
      {
        code: "GY",
        emoji: "ðŸ‡¬ðŸ‡¾",
        unicode: "U+1F1EC U+1F1FE",
        name: "Guyana",
        title: "flag for Guyana",
        dialCode: "+595"
      },
      {
        code: "HK",
        emoji: "ðŸ‡­ðŸ‡°",
        unicode: "U+1F1ED U+1F1F0",
        name: "Hong Kong",
        title: "flag for Hong Kong",
        dialCode: "+852"
      },
      {
        code: "HM",
        emoji: "ðŸ‡­ðŸ‡²",
        unicode: "U+1F1ED U+1F1F2",
        name: "Heard Island and Mcdonald Islands",
        title: "flag for Heard Island and Mcdonald Islands"
      },
      {
        code: "HN",
        emoji: "ðŸ‡­ðŸ‡³",
        unicode: "U+1F1ED U+1F1F3",
        name: "Honduras",
        title: "flag for Honduras",
        dialCode: "+504"
      },
      {
        code: "HR",
        emoji: "ðŸ‡­ðŸ‡·",
        unicode: "U+1F1ED U+1F1F7",
        name: "Croatia",
        title: "flag for Croatia",
        dialCode: "+385"
      },
      {
        code: "HT",
        emoji: "ðŸ‡­ðŸ‡¹",
        unicode: "U+1F1ED U+1F1F9",
        name: "Haiti",
        title: "flag for Haiti",
        dialCode: "+509"
      },
      {
        code: "HU",
        emoji: "ðŸ‡­ðŸ‡º",
        unicode: "U+1F1ED U+1F1FA",
        name: "Hungary",
        title: "flag for Hungary",
        dialCode: "+36"
      },
      {
        code: "ID",
        emoji: "ðŸ‡®ðŸ‡©",
        unicode: "U+1F1EE U+1F1E9",
        name: "Indonesia",
        title: "flag for Indonesia",
        dialCode: "+62"
      },
      {
        code: "IE",
        emoji: "ðŸ‡®ðŸ‡ª",
        unicode: "U+1F1EE U+1F1EA",
        name: "Ireland",
        title: "flag for Ireland",
        dialCode: "+353"
      },
      {
        code: "IL",
        emoji: "ðŸ‡®ðŸ‡±",
        unicode: "U+1F1EE U+1F1F1",
        name: "Israel",
        title: "flag for Israel",
        dialCode: "+972"
      },
      {
        code: "IM",
        emoji: "ðŸ‡®ðŸ‡²",
        unicode: "U+1F1EE U+1F1F2",
        name: "Isle of Man",
        title: "flag for Isle of Man",
        dialCode: "+44"
      },
      {
        code: "IN",
        emoji: "ðŸ‡®ðŸ‡³",
        unicode: "U+1F1EE U+1F1F3",
        name: "India",
        title: "flag for India",
        dialCode: "+91"
      },
      {
        code: "IO",
        emoji: "ðŸ‡®ðŸ‡´",
        unicode: "U+1F1EE U+1F1F4",
        name: "British Indian Ocean Territory",
        title: "flag for British Indian Ocean Territory",
        dialCode: "+246"
      },
      {
        code: "IQ",
        emoji: "ðŸ‡®ðŸ‡¶",
        unicode: "U+1F1EE U+1F1F6",
        name: "Iraq",
        title: "flag for Iraq",
        dialCode: "+964"
      },
      {
        code: "IR",
        emoji: "ðŸ‡®ðŸ‡·",
        unicode: "U+1F1EE U+1F1F7",
        name: "Iran",
        title: "flag for Iran",
        dialCode: "+98"
      },
      {
        code: "IS",
        emoji: "ðŸ‡®ðŸ‡¸",
        unicode: "U+1F1EE U+1F1F8",
        name: "Iceland",
        title: "flag for Iceland",
        dialCode: "+354"
      },
      {
        code: "IT",
        emoji: "ðŸ‡®ðŸ‡¹",
        unicode: "U+1F1EE U+1F1F9",
        name: "Italy",
        title: "flag for Italy",
        dialCode: "+39"
      },
      {
        code: "JE",
        emoji: "ðŸ‡¯ðŸ‡ª",
        unicode: "U+1F1EF U+1F1EA",
        name: "Jersey",
        title: "flag for Jersey",
        dialCode: "+44"
      },
      {
        code: "JM",
        emoji: "ðŸ‡¯ðŸ‡²",
        unicode: "U+1F1EF U+1F1F2",
        name: "Jamaica",
        title: "flag for Jamaica",
        dialCode: "+1 876"
      },
      {
        code: "JO",
        emoji: "ðŸ‡¯ðŸ‡´",
        unicode: "U+1F1EF U+1F1F4",
        name: "Jordan",
        title: "flag for Jordan",
        dialCode: "+962"
      },
      {
        code: "JP",
        emoji: "ðŸ‡¯ðŸ‡µ",
        unicode: "U+1F1EF U+1F1F5",
        name: "Japan",
        title: "flag for Japan",
        dialCode: "+81"
      },
      {
        code: "KE",
        emoji: "ðŸ‡°ðŸ‡ª",
        unicode: "U+1F1F0 U+1F1EA",
        name: "Kenya",
        title: "flag for Kenya",
        dialCode: "+254"
      },
      {
        code: "KG",
        emoji: "ðŸ‡°ðŸ‡¬",
        unicode: "U+1F1F0 U+1F1EC",
        name: "Kyrgyzstan",
        title: "flag for Kyrgyzstan",
        dialCode: "+996"
      },
      {
        code: "KH",
        emoji: "ðŸ‡°ðŸ‡­",
        unicode: "U+1F1F0 U+1F1ED",
        name: "Cambodia",
        title: "flag for Cambodia",
        dialCode: "+855"
      },
      {
        code: "KI",
        emoji: "ðŸ‡°ðŸ‡®",
        unicode: "U+1F1F0 U+1F1EE",
        name: "Kiribati",
        title: "flag for Kiribati",
        dialCode: "+686"
      },
      {
        code: "KM",
        emoji: "ðŸ‡°ðŸ‡²",
        unicode: "U+1F1F0 U+1F1F2",
        name: "Comoros",
        title: "flag for Comoros",
        dialCode: "+269"
      },
      {
        code: "KN",
        emoji: "ðŸ‡°ðŸ‡³",
        unicode: "U+1F1F0 U+1F1F3",
        name: "Saint Kitts and Nevis",
        title: "flag for Saint Kitts and Nevis",
        dialCode: "+1 869"
      },
      {
        code: "KP",
        emoji: "ðŸ‡°ðŸ‡µ",
        unicode: "U+1F1F0 U+1F1F5",
        name: "North Korea",
        title: "flag for North Korea",
        dialCode: "+850"
      },
      {
        code: "KR",
        emoji: "ðŸ‡°ðŸ‡·",
        unicode: "U+1F1F0 U+1F1F7",
        name: "South Korea",
        title: "flag for South Korea",
        dialCode: "+82"
      },
      {
        code: "KW",
        emoji: "ðŸ‡°ðŸ‡¼",
        unicode: "U+1F1F0 U+1F1FC",
        name: "Kuwait",
        title: "flag for Kuwait",
        dialCode: "+965"
      },
      {
        code: "KY",
        emoji: "ðŸ‡°ðŸ‡¾",
        unicode: "U+1F1F0 U+1F1FE",
        name: "Cayman Islands",
        title: "flag for Cayman Islands",
        dialCode: "+ 345"
      },
      {
        code: "KZ",
        emoji: "ðŸ‡°ðŸ‡¿",
        unicode: "U+1F1F0 U+1F1FF",
        name: "Kazakhstan",
        title: "flag for Kazakhstan",
        dialCode: "+7 7"
      },
      {
        code: "LA",
        emoji: "ðŸ‡±ðŸ‡¦",
        unicode: "U+1F1F1 U+1F1E6",
        name: "Lao People's Democratic Republic",
        title: "flag for Lao People's Democratic Republic",
        dialCode: "+856"
      },
      {
        code: "LB",
        emoji: "ðŸ‡±ðŸ‡§",
        unicode: "U+1F1F1 U+1F1E7",
        name: "Lebanon",
        title: "flag for Lebanon",
        dialCode: "+961"
      },
      {
        code: "LC",
        emoji: "ðŸ‡±ðŸ‡¨",
        unicode: "U+1F1F1 U+1F1E8",
        name: "Saint Lucia",
        title: "flag for Saint Lucia",
        dialCode: "+1 758"
      },
      {
        code: "LI",
        emoji: "ðŸ‡±ðŸ‡®",
        unicode: "U+1F1F1 U+1F1EE",
        name: "Liechtenstein",
        title: "flag for Liechtenstein",
        dialCode: "+423"
      },
      {
        code: "LK",
        emoji: "ðŸ‡±ðŸ‡°",
        unicode: "U+1F1F1 U+1F1F0",
        name: "Sri Lanka",
        title: "flag for Sri Lanka",
        dialCode: "+94"
      },
      {
        code: "LR",
        emoji: "ðŸ‡±ðŸ‡·",
        unicode: "U+1F1F1 U+1F1F7",
        name: "Liberia",
        title: "flag for Liberia",
        dialCode: "+231"
      },
      {
        code: "LS",
        emoji: "ðŸ‡±ðŸ‡¸",
        unicode: "U+1F1F1 U+1F1F8",
        name: "Lesotho",
        title: "flag for Lesotho",
        dialCode: "+266"
      },
      {
        code: "LT",
        emoji: "ðŸ‡±ðŸ‡¹",
        unicode: "U+1F1F1 U+1F1F9",
        name: "Lithuania",
        title: "flag for Lithuania",
        dialCode: "+370"
      },
      {
        code: "LU",
        emoji: "ðŸ‡±ðŸ‡º",
        unicode: "U+1F1F1 U+1F1FA",
        name: "Luxembourg",
        title: "flag for Luxembourg",
        dialCode: "+352"
      },
      {
        code: "LV",
        emoji: "ðŸ‡±ðŸ‡»",
        unicode: "U+1F1F1 U+1F1FB",
        name: "Latvia",
        title: "flag for Latvia",
        dialCode: "+371"
      },
      {
        code: "LY",
        emoji: "ðŸ‡±ðŸ‡¾",
        unicode: "U+1F1F1 U+1F1FE",
        name: "Libya",
        title: "flag for Libya",
        dialCode: "+218"
      },
      {
        code: "MA",
        emoji: "ðŸ‡²ðŸ‡¦",
        unicode: "U+1F1F2 U+1F1E6",
        name: "Morocco",
        title: "flag for Morocco",
        dialCode: "+212"
      },
      {
        code: "MC",
        emoji: "ðŸ‡²ðŸ‡¨",
        unicode: "U+1F1F2 U+1F1E8",
        name: "Monaco",
        title: "flag for Monaco",
        dialCode: "+377"
      },
      {
        code: "MD",
        emoji: "ðŸ‡²ðŸ‡©",
        unicode: "U+1F1F2 U+1F1E9",
        name: "Moldova",
        title: "flag for Moldova",
        dialCode: "+373"
      },
      {
        code: "ME",
        emoji: "ðŸ‡²ðŸ‡ª",
        unicode: "U+1F1F2 U+1F1EA",
        name: "Montenegro",
        title: "flag for Montenegro",
        dialCode: "+382"
      },
      {
        code: "MF",
        emoji: "ðŸ‡²ðŸ‡«",
        unicode: "U+1F1F2 U+1F1EB",
        name: "Saint Martin (French Part)",
        title: "flag for Saint Martin (French Part)",
        dialCode: "+590"
      },
      {
        code: "MG",
        emoji: "ðŸ‡²ðŸ‡¬",
        unicode: "U+1F1F2 U+1F1EC",
        name: "Madagascar",
        title: "flag for Madagascar",
        dialCode: "+261"
      },
      {
        code: "MH",
        emoji: "ðŸ‡²ðŸ‡­",
        unicode: "U+1F1F2 U+1F1ED",
        name: "Marshall Islands",
        title: "flag for Marshall Islands",
        dialCode: "+692"
      },
      {
        code: "MK",
        emoji: "ðŸ‡²ðŸ‡°",
        unicode: "U+1F1F2 U+1F1F0",
        name: "Macedonia",
        title: "flag for Macedonia",
        dialCode: "+389"
      },
      {
        code: "ML",
        emoji: "ðŸ‡²ðŸ‡±",
        unicode: "U+1F1F2 U+1F1F1",
        name: "Mali",
        title: "flag for Mali",
        dialCode: "+223"
      },
      {
        code: "MM",
        emoji: "ðŸ‡²ðŸ‡²",
        unicode: "U+1F1F2 U+1F1F2",
        name: "Myanmar",
        title: "flag for Myanmar",
        dialCode: "+95"
      },
      {
        code: "MN",
        emoji: "ðŸ‡²ðŸ‡³",
        unicode: "U+1F1F2 U+1F1F3",
        name: "Mongolia",
        title: "flag for Mongolia",
        dialCode: "+976"
      },
      {
        code: "MO",
        emoji: "ðŸ‡²ðŸ‡´",
        unicode: "U+1F1F2 U+1F1F4",
        name: "Macao",
        title: "flag for Macao",
        dialCode: "+853"
      },
      {
        code: "MP",
        emoji: "ðŸ‡²ðŸ‡µ",
        unicode: "U+1F1F2 U+1F1F5",
        name: "Northern Mariana Islands",
        title: "flag for Northern Mariana Islands",
        dialCode: "+1 670"
      },
      {
        code: "MQ",
        emoji: "ðŸ‡²ðŸ‡¶",
        unicode: "U+1F1F2 U+1F1F6",
        name: "Martinique",
        title: "flag for Martinique",
        dialCode: "+596"
      },
      {
        code: "MR",
        emoji: "ðŸ‡²ðŸ‡·",
        unicode: "U+1F1F2 U+1F1F7",
        name: "Mauritania",
        title: "flag for Mauritania",
        dialCode: "+222"
      },
      {
        code: "MS",
        emoji: "ðŸ‡²ðŸ‡¸",
        unicode: "U+1F1F2 U+1F1F8",
        name: "Montserrat",
        title: "flag for Montserrat",
        dialCode: "+1664"
      },
      {
        code: "MT",
        emoji: "ðŸ‡²ðŸ‡¹",
        unicode: "U+1F1F2 U+1F1F9",
        name: "Malta",
        title: "flag for Malta",
        dialCode: "+356"
      },
      {
        code: "MU",
        emoji: "ðŸ‡²ðŸ‡º",
        unicode: "U+1F1F2 U+1F1FA",
        name: "Mauritius",
        title: "flag for Mauritius",
        dialCode: "+230"
      },
      {
        code: "MV",
        emoji: "ðŸ‡²ðŸ‡»",
        unicode: "U+1F1F2 U+1F1FB",
        name: "Maldives",
        title: "flag for Maldives",
        dialCode: "+960"
      },
      {
        code: "MW",
        emoji: "ðŸ‡²ðŸ‡¼",
        unicode: "U+1F1F2 U+1F1FC",
        name: "Malawi",
        title: "flag for Malawi",
        dialCode: "+265"
      },
      {
        code: "MX",
        emoji: "ðŸ‡²ðŸ‡½",
        unicode: "U+1F1F2 U+1F1FD",
        name: "Mexico",
        title: "flag for Mexico",
        dialCode: "+52"
      },
      {
        code: "MY",
        emoji: "ðŸ‡²ðŸ‡¾",
        unicode: "U+1F1F2 U+1F1FE",
        name: "Malaysia",
        title: "flag for Malaysia",
        dialCode: "+60"
      },
      {
        code: "MZ",
        emoji: "ðŸ‡²ðŸ‡¿",
        unicode: "U+1F1F2 U+1F1FF",
        name: "Mozambique",
        title: "flag for Mozambique",
        dialCode: "+258"
      },
      {
        code: "NA",
        emoji: "ðŸ‡³ðŸ‡¦",
        unicode: "U+1F1F3 U+1F1E6",
        name: "Namibia",
        title: "flag for Namibia",
        dialCode: "+264"
      },
      {
        code: "NC",
        emoji: "ðŸ‡³ðŸ‡¨",
        unicode: "U+1F1F3 U+1F1E8",
        name: "New Caledonia",
        title: "flag for New Caledonia",
        dialCode: "+687"
      },
      {
        code: "NE",
        emoji: "ðŸ‡³ðŸ‡ª",
        unicode: "U+1F1F3 U+1F1EA",
        name: "Niger",
        title: "flag for Niger",
        dialCode: "+227"
      },
      {
        code: "NF",
        emoji: "ðŸ‡³ðŸ‡«",
        unicode: "U+1F1F3 U+1F1EB",
        name: "Norfolk Island",
        title: "flag for Norfolk Island",
        dialCode: "+672"
      },
      {
        code: "NG",
        emoji: "ðŸ‡³ðŸ‡¬",
        unicode: "U+1F1F3 U+1F1EC",
        name: "Nigeria",
        title: "flag for Nigeria",
        dialCode: "+234"
      },
      {
        code: "NI",
        emoji: "ðŸ‡³ðŸ‡®",
        unicode: "U+1F1F3 U+1F1EE",
        name: "Nicaragua",
        title: "flag for Nicaragua",
        dialCode: "+505"
      },
      {
        code: "NL",
        emoji: "ðŸ‡³ðŸ‡±",
        unicode: "U+1F1F3 U+1F1F1",
        name: "Netherlands",
        title: "flag for Netherlands",
        dialCode: "+31"
      },
      {
        code: "NO",
        emoji: "ðŸ‡³ðŸ‡´",
        unicode: "U+1F1F3 U+1F1F4",
        name: "Norway",
        title: "flag for Norway",
        dialCode: "+47"
      },
      {
        code: "NP",
        emoji: "ðŸ‡³ðŸ‡µ",
        unicode: "U+1F1F3 U+1F1F5",
        name: "Nepal",
        title: "flag for Nepal",
        dialCode: "+977"
      },
      {
        code: "NR",
        emoji: "ðŸ‡³ðŸ‡·",
        unicode: "U+1F1F3 U+1F1F7",
        name: "Nauru",
        title: "flag for Nauru",
        dialCode: "+674"
      },
      {
        code: "NU",
        emoji: "ðŸ‡³ðŸ‡º",
        unicode: "U+1F1F3 U+1F1FA",
        name: "Niue",
        title: "flag for Niue",
        dialCode: "+683"
      },
      {
        code: "NZ",
        emoji: "ðŸ‡³ðŸ‡¿",
        unicode: "U+1F1F3 U+1F1FF",
        name: "New Zealand",
        title: "flag for New Zealand",
        dialCode: "+64"
      },
      {
        code: "OM",
        emoji: "ðŸ‡´ðŸ‡²",
        unicode: "U+1F1F4 U+1F1F2",
        name: "Oman",
        title: "flag for Oman",
        dialCode: "+968"
      },
      {
        code: "PA",
        emoji: "ðŸ‡µðŸ‡¦",
        unicode: "U+1F1F5 U+1F1E6",
        name: "Panama",
        title: "flag for Panama",
        dialCode: "+507"
      },
      {
        code: "PE",
        emoji: "ðŸ‡µðŸ‡ª",
        unicode: "U+1F1F5 U+1F1EA",
        name: "Peru",
        title: "flag for Peru",
        dialCode: "+51"
      },
      {
        code: "PF",
        emoji: "ðŸ‡µðŸ‡«",
        unicode: "U+1F1F5 U+1F1EB",
        name: "French Polynesia",
        title: "flag for French Polynesia",
        dialCode: "+689"
      },
      {
        code: "PG",
        emoji: "ðŸ‡µðŸ‡¬",
        unicode: "U+1F1F5 U+1F1EC",
        name: "Papua New Guinea",
        title: "flag for Papua New Guinea",
        dialCode: "+675"
      },
      {
        code: "PH",
        emoji: "ðŸ‡µðŸ‡­",
        unicode: "U+1F1F5 U+1F1ED",
        name: "Philippines",
        title: "flag for Philippines",
        dialCode: "+63"
      },
      {
        code: "PK",
        emoji: "ðŸ‡µðŸ‡°",
        unicode: "U+1F1F5 U+1F1F0",
        name: "Pakistan",
        title: "flag for Pakistan",
        dialCode: "+92"
      },
      {
        code: "PL",
        emoji: "ðŸ‡µðŸ‡±",
        unicode: "U+1F1F5 U+1F1F1",
        name: "Poland",
        title: "flag for Poland",
        dialCode: "+48"
      },
      {
        code: "PM",
        emoji: "ðŸ‡µðŸ‡²",
        unicode: "U+1F1F5 U+1F1F2",
        name: "Saint Pierre and Miquelon",
        title: "flag for Saint Pierre and Miquelon",
        dialCode: "+508"
      },
      {
        code: "PN",
        emoji: "ðŸ‡µðŸ‡³",
        unicode: "U+1F1F5 U+1F1F3",
        name: "Pitcairn",
        title: "flag for Pitcairn",
        dialCode: "+872"
      },
      {
        code: "PR",
        emoji: "ðŸ‡µðŸ‡·",
        unicode: "U+1F1F5 U+1F1F7",
        name: "Puerto Rico",
        title: "flag for Puerto Rico",
        dialCode: "+1 939"
      },
      {
        code: "PS",
        emoji: "ðŸ‡µðŸ‡¸",
        unicode: "U+1F1F5 U+1F1F8",
        name: "Palestinian Territory",
        title: "flag for Palestinian Territory",
        dialCode: "+970"
      },
      {
        code: "PT",
        emoji: "ðŸ‡µðŸ‡¹",
        unicode: "U+1F1F5 U+1F1F9",
        name: "Portugal",
        title: "flag for Portugal",
        dialCode: "+351"
      },
      {
        code: "PW",
        emoji: "ðŸ‡µðŸ‡¼",
        unicode: "U+1F1F5 U+1F1FC",
        name: "Palau",
        title: "flag for Palau",
        dialCode: "+680"
      },
      {
        code: "PY",
        emoji: "ðŸ‡µðŸ‡¾",
        unicode: "U+1F1F5 U+1F1FE",
        name: "Paraguay",
        title: "flag for Paraguay",
        dialCode: "+595"
      },
      {
        code: "QA",
        emoji: "ðŸ‡¶ðŸ‡¦",
        unicode: "U+1F1F6 U+1F1E6",
        name: "Qatar",
        title: "flag for Qatar",
        dialCode: "+974"
      },
      {
        code: "RE",
        emoji: "ðŸ‡·ðŸ‡ª",
        unicode: "U+1F1F7 U+1F1EA",
        name: "RÃ©union",
        title: "flag for RÃ©union",
        dialCode: "+262"
      },
      {
        code: "RO",
        emoji: "ðŸ‡·ðŸ‡´",
        unicode: "U+1F1F7 U+1F1F4",
        name: "Romania",
        title: "flag for Romania",
        dialCode: "+40"
      },
      {
        code: "RS",
        emoji: "ðŸ‡·ðŸ‡¸",
        unicode: "U+1F1F7 U+1F1F8",
        name: "Serbia",
        title: "flag for Serbia",
        dialCode: "+381"
      },
      {
        code: "RU",
        emoji: "ðŸ‡·ðŸ‡º",
        unicode: "U+1F1F7 U+1F1FA",
        name: "Russia",
        title: "flag for Russia",
        dialCode: "+7"
      },
      {
        code: "RW",
        emoji: "ðŸ‡·ðŸ‡¼",
        unicode: "U+1F1F7 U+1F1FC",
        name: "Rwanda",
        title: "flag for Rwanda",
        dialCode: "+250"
      },
      {
        code: "SA",
        emoji: "ðŸ‡¸ðŸ‡¦",
        unicode: "U+1F1F8 U+1F1E6",
        name: "Saudi Arabia",
        title: "flag for Saudi Arabia",
        dialCode: "+966"
      },
      {
        code: "SB",
        emoji: "ðŸ‡¸ðŸ‡§",
        unicode: "U+1F1F8 U+1F1E7",
        name: "Solomon Islands",
        title: "flag for Solomon Islands",
        dialCode: "+677"
      },
      {
        code: "SC",
        emoji: "ðŸ‡¸ðŸ‡¨",
        unicode: "U+1F1F8 U+1F1E8",
        name: "Seychelles",
        title: "flag for Seychelles",
        dialCode: "+248"
      },
      {
        code: "SD",
        emoji: "ðŸ‡¸ðŸ‡©",
        unicode: "U+1F1F8 U+1F1E9",
        name: "Sudan",
        title: "flag for Sudan",
        dialCode: "+249"
      },
      {
        code: "SE",
        emoji: "ðŸ‡¸ðŸ‡ª",
        unicode: "U+1F1F8 U+1F1EA",
        name: "Sweden",
        title: "flag for Sweden",
        dialCode: "+46"
      },
      {
        code: "SG",
        emoji: "ðŸ‡¸ðŸ‡¬",
        unicode: "U+1F1F8 U+1F1EC",
        name: "Singapore",
        title: "flag for Singapore",
        dialCode: "+65"
      },
      {
        code: "SH",
        emoji: "ðŸ‡¸ðŸ‡­",
        unicode: "U+1F1F8 U+1F1ED",
        name: "Saint Helena, Ascension and Tristan Da Cunha",
        title: "flag for Saint Helena, Ascension and Tristan Da Cunha",
        dialCode: "+290"
      },
      {
        code: "SI",
        emoji: "ðŸ‡¸ðŸ‡®",
        unicode: "U+1F1F8 U+1F1EE",
        name: "Slovenia",
        title: "flag for Slovenia",
        dialCode: "+386"
      },
      {
        code: "SJ",
        emoji: "ðŸ‡¸ðŸ‡¯",
        unicode: "U+1F1F8 U+1F1EF",
        name: "Svalbard and Jan Mayen",
        title: "flag for Svalbard and Jan Mayen",
        dialCode: "+47"
      },
      {
        code: "SK",
        emoji: "ðŸ‡¸ðŸ‡°",
        unicode: "U+1F1F8 U+1F1F0",
        name: "Slovakia",
        title: "flag for Slovakia",
        dialCode: "+421"
      },
      {
        code: "SL",
        emoji: "ðŸ‡¸ðŸ‡±",
        unicode: "U+1F1F8 U+1F1F1",
        name: "Sierra Leone",
        title: "flag for Sierra Leone",
        dialCode: "+232"
      },
      {
        code: "SM",
        emoji: "ðŸ‡¸ðŸ‡²",
        unicode: "U+1F1F8 U+1F1F2",
        name: "San Marino",
        title: "flag for San Marino",
        dialCode: "+378"
      },
      {
        code: "SN",
        emoji: "ðŸ‡¸ðŸ‡³",
        unicode: "U+1F1F8 U+1F1F3",
        name: "Senegal",
        title: "flag for Senegal",
        dialCode: "+221"
      },
      {
        code: "SO",
        emoji: "ðŸ‡¸ðŸ‡´",
        unicode: "U+1F1F8 U+1F1F4",
        name: "Somalia",
        title: "flag for Somalia",
        dialCode: "+252"
      },
      {
        code: "SR",
        emoji: "ðŸ‡¸ðŸ‡·",
        unicode: "U+1F1F8 U+1F1F7",
        name: "Suriname",
        title: "flag for Suriname",
        dialCode: "+597"
      },
      {
        code: "SS",
        emoji: "ðŸ‡¸ðŸ‡¸",
        unicode: "U+1F1F8 U+1F1F8",
        name: "South Sudan",
        title: "flag for South Sudan"
      },
      {
        code: "ST",
        emoji: "ðŸ‡¸ðŸ‡¹",
        unicode: "U+1F1F8 U+1F1F9",
        name: "Sao Tome and Principe",
        title: "flag for Sao Tome and Principe",
        dialCode: "+239"
      },
      {
        code: "SV",
        emoji: "ðŸ‡¸ðŸ‡»",
        unicode: "U+1F1F8 U+1F1FB",
        name: "El Salvador",
        title: "flag for El Salvador",
        dialCode: "+503"
      },
      {
        code: "SX",
        emoji: "ðŸ‡¸ðŸ‡½",
        unicode: "U+1F1F8 U+1F1FD",
        name: "Sint Maarten (Dutch Part)",
        title: "flag for Sint Maarten (Dutch Part)"
      },
      {
        code: "SY",
        emoji: "ðŸ‡¸ðŸ‡¾",
        unicode: "U+1F1F8 U+1F1FE",
        name: "Syrian Arab Republic",
        title: "flag for Syrian Arab Republic",
        dialCode: "+963"
      },
      {
        code: "SZ",
        emoji: "ðŸ‡¸ðŸ‡¿",
        unicode: "U+1F1F8 U+1F1FF",
        name: "Swaziland",
        title: "flag for Swaziland",
        dialCode: "+268"
      },
      {
        code: "TC",
        emoji: "ðŸ‡¹ðŸ‡¨",
        unicode: "U+1F1F9 U+1F1E8",
        name: "Turks and Caicos Islands",
        title: "flag for Turks and Caicos Islands",
        dialCode: "+1 649"
      },
      {
        code: "TD",
        emoji: "ðŸ‡¹ðŸ‡©",
        unicode: "U+1F1F9 U+1F1E9",
        name: "Chad",
        title: "flag for Chad",
        dialCode: "+235"
      },
      {
        code: "TF",
        emoji: "ðŸ‡¹ðŸ‡«",
        unicode: "U+1F1F9 U+1F1EB",
        name: "French Southern Territories",
        title: "flag for French Southern Territories"
      },
      {
        code: "TG",
        emoji: "ðŸ‡¹ðŸ‡¬",
        unicode: "U+1F1F9 U+1F1EC",
        name: "Togo",
        title: "flag for Togo",
        dialCode: "+228"
      },
      {
        code: "TH",
        emoji: "ðŸ‡¹ðŸ‡­",
        unicode: "U+1F1F9 U+1F1ED",
        name: "Thailand",
        title: "flag for Thailand",
        dialCode: "+66"
      },
      {
        code: "TJ",
        emoji: "ðŸ‡¹ðŸ‡¯",
        unicode: "U+1F1F9 U+1F1EF",
        name: "Tajikistan",
        title: "flag for Tajikistan",
        dialCode: "+992"
      },
      {
        code: "TK",
        emoji: "ðŸ‡¹ðŸ‡°",
        unicode: "U+1F1F9 U+1F1F0",
        name: "Tokelau",
        title: "flag for Tokelau",
        dialCode: "+690"
      },
      {
        code: "TL",
        emoji: "ðŸ‡¹ðŸ‡±",
        unicode: "U+1F1F9 U+1F1F1",
        name: "Timor-Leste",
        title: "flag for Timor-Leste",
        dialCode: "+670"
      },
      {
        code: "TM",
        emoji: "ðŸ‡¹ðŸ‡²",
        unicode: "U+1F1F9 U+1F1F2",
        name: "Turkmenistan",
        title: "flag for Turkmenistan",
        dialCode: "+993"
      },
      {
        code: "TN",
        emoji: "ðŸ‡¹ðŸ‡³",
        unicode: "U+1F1F9 U+1F1F3",
        name: "Tunisia",
        title: "flag for Tunisia",
        dialCode: "+216"
      },
      {
        code: "TO",
        emoji: "ðŸ‡¹ðŸ‡´",
        unicode: "U+1F1F9 U+1F1F4",
        name: "Tonga",
        title: "flag for Tonga",
        dialCode: "+676"
      },
      {
        code: "TR",
        emoji: "ðŸ‡¹ðŸ‡·",
        unicode: "U+1F1F9 U+1F1F7",
        name: "Turkey",
        title: "flag for Turkey",
        dialCode: "+90"
      },
      {
        code: "TT",
        emoji: "ðŸ‡¹ðŸ‡¹",
        unicode: "U+1F1F9 U+1F1F9",
        name: "Trinidad and Tobago",
        title: "flag for Trinidad and Tobago",
        dialCode: "+1 868"
      },
      {
        code: "TV",
        emoji: "ðŸ‡¹ðŸ‡»",
        unicode: "U+1F1F9 U+1F1FB",
        name: "Tuvalu",
        title: "flag for Tuvalu",
        dialCode: "+688"
      },
      {
        code: "TW",
        emoji: "ðŸ‡¹ðŸ‡¼",
        unicode: "U+1F1F9 U+1F1FC",
        name: "Taiwan",
        title: "flag for Taiwan",
        dialCode: "+886"
      },
      {
        code: "TZ",
        emoji: "ðŸ‡¹ðŸ‡¿",
        unicode: "U+1F1F9 U+1F1FF",
        name: "Tanzania",
        title: "flag for Tanzania",
        dialCode: "+255"
      },
      {
        code: "UA",
        emoji: "ðŸ‡ºðŸ‡¦",
        unicode: "U+1F1FA U+1F1E6",
        name: "Ukraine",
        title: "flag for Ukraine",
        dialCode: "+380"
      },
      {
        code: "UG",
        emoji: "ðŸ‡ºðŸ‡¬",
        unicode: "U+1F1FA U+1F1EC",
        name: "Uganda",
        title: "flag for Uganda",
        dialCode: "+256"
      },
      {
        code: "UM",
        emoji: "ðŸ‡ºðŸ‡²",
        unicode: "U+1F1FA U+1F1F2",
        name: "United States Minor Outlying Islands",
        title: "flag for United States Minor Outlying Islands"
      },
      {
        code: "US",
        emoji: "ðŸ‡ºðŸ‡¸",
        unicode: "U+1F1FA U+1F1F8",
        name: "United States",
        title: "flag for United States",
        dialCode: "+1"
      },
      {
        code: "UY",
        emoji: "ðŸ‡ºðŸ‡¾",
        unicode: "U+1F1FA U+1F1FE",
        name: "Uruguay",
        title: "flag for Uruguay",
        dialCode: "+598"
      },
      {
        code: "UZ",
        emoji: "ðŸ‡ºðŸ‡¿",
        unicode: "U+1F1FA U+1F1FF",
        name: "Uzbekistan",
        title: "flag for Uzbekistan",
        dialCode: "+998"
      },
      {
        code: "VA",
        emoji: "ðŸ‡»ðŸ‡¦",
        unicode: "U+1F1FB U+1F1E6",
        name: "Vatican City",
        title: "flag for Vatican City",
        dialCode: "+379"
      },
      {
        code: "VC",
        emoji: "ðŸ‡»ðŸ‡¨",
        unicode: "U+1F1FB U+1F1E8",
        name: "Saint Vincent and The Grenadines",
        title: "flag for Saint Vincent and The Grenadines",
        dialCode: "+1 784"
      },
      {
        code: "VE",
        emoji: "ðŸ‡»ðŸ‡ª",
        unicode: "U+1F1FB U+1F1EA",
        name: "Venezuela",
        title: "flag for Venezuela",
        dialCode: "+58"
      },
      {
        code: "VG",
        emoji: "ðŸ‡»ðŸ‡¬",
        unicode: "U+1F1FB U+1F1EC",
        name: "Virgin Islands, British",
        title: "flag for Virgin Islands, British",
        dialCode: "+1 284"
      },
      {
        code: "VI",
        emoji: "ðŸ‡»ðŸ‡®",
        unicode: "U+1F1FB U+1F1EE",
        name: "Virgin Islands, U.S.",
        title: "flag for Virgin Islands, U.S.",
        dialCode: "+1 340"
      },
      {
        code: "VN",
        emoji: "ðŸ‡»ðŸ‡³",
        unicode: "U+1F1FB U+1F1F3",
        name: "Viet Nam",
        title: "flag for Viet Nam",
        dialCode: "+84"
      },
      {
        code: "VU",
        emoji: "ðŸ‡»ðŸ‡º",
        unicode: "U+1F1FB U+1F1FA",
        name: "Vanuatu",
        title: "flag for Vanuatu",
        dialCode: "+678"
      },
      {
        code: "WF",
        emoji: "ðŸ‡¼ðŸ‡«",
        unicode: "U+1F1FC U+1F1EB",
        name: "Wallis and Futuna",
        title: "flag for Wallis and Futuna",
        dialCode: "+681"
      },
      {
        code: "WS",
        emoji: "ðŸ‡¼ðŸ‡¸",
        unicode: "U+1F1FC U+1F1F8",
        name: "Samoa",
        title: "flag for Samoa",
        dialCode: "+685"
      },
      {
        code: "XK",
        emoji: "ðŸ‡½ðŸ‡°",
        unicode: "U+1F1FD U+1F1F0",
        name: "Kosovo",
        title: "flag for Kosovo",
        dialCode: "+383"
      },
      {
        code: "YE",
        emoji: "ðŸ‡¾ðŸ‡ª",
        unicode: "U+1F1FE U+1F1EA",
        name: "Yemen",
        title: "flag for Yemen",
        dialCode: "+967"
      },
      {
        code: "YT",
        emoji: "ðŸ‡¾ðŸ‡¹",
        unicode: "U+1F1FE U+1F1F9",
        name: "Mayotte",
        title: "flag for Mayotte",
        dialCode: "+262"
      },
      {
        code: "ZA",
        emoji: "ðŸ‡¿ðŸ‡¦",
        unicode: "U+1F1FF U+1F1E6",
        name: "South Africa",
        title: "flag for South Africa",
        dialCode: "+27"
      },
      {
        code: "ZM",
        emoji: "ðŸ‡¿ðŸ‡²",
        unicode: "U+1F1FF U+1F1F2",
        name: "Zambia",
        title: "flag for Zambia",
        dialCode: "+260"
      },
      {
        code: "ZW",
        emoji: "ðŸ‡¿ðŸ‡¼",
        unicode: "U+1F1FF U+1F1FC",
        name: "Zimbabwe",
        title: "flag for Zimbabwe",
        dialCode: "+263"
      }
    ];
  }
});

// node_modules/lodash.isarray/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.isarray/index.js"(exports, module) {
    var arrayTag = "[object Array]";
    var funcTag = "[object Function]";
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    var objectProto = Object.prototype;
    var fnToString = Function.prototype.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var nativeIsArray = getNative(Array, "isArray");
    var MAX_SAFE_INTEGER = 9007199254740991;
    function getNative(object, key) {
      var value = object == null ? void 0 : object[key];
      return isNative(value) ? value : void 0;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };
    function isFunction(value) {
      return isObject(value) && objToString.call(value) == funcTag;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }
    module.exports = isArray;
  }
});

// node_modules/lodash.istypedarray/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.istypedarray/index.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    module.exports = isTypedArray;
  }
});

// node_modules/lodash._getnative/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash._getnative/index.js"(exports, module) {
    var funcTag = "[object Function]";
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    var objectProto = Object.prototype;
    var fnToString = Function.prototype.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function getNative(object, key) {
      var value = object == null ? void 0 : object[key];
      return isNative(value) ? value : void 0;
    }
    function isFunction(value) {
      return isObject(value) && objToString.call(value) == funcTag;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }
    module.exports = getNative;
  }
});

// node_modules/lodash.isarguments/index.js
var require_lodash4 = __commonJS({
  "node_modules/lodash.isarguments/index.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    module.exports = isArguments;
  }
});

// node_modules/lodash.keys/index.js
var require_lodash5 = __commonJS({
  "node_modules/lodash.keys/index.js"(exports, module) {
    var getNative = require_lodash3();
    var isArguments = require_lodash4();
    var isArray = require_lodash();
    var reIsUint = /^\d+$/;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeKeys = getNative(Object, "keys");
    var MAX_SAFE_INTEGER = 9007199254740991;
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    var getLength = baseProperty("length");
    function isArrayLike(value) {
      return value != null && isLength(getLength(value));
    }
    function isIndex(value, length) {
      value = typeof value == "number" || reIsUint.test(value) ? +value : -1;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function shimKeys(object) {
      var props = keysIn(object), propsLength = props.length, length = propsLength && object.length;
      var allowIndexes = !!length && isLength(length) && (isArray(object) || isArguments(object));
      var index = -1, result = [];
      while (++index < propsLength) {
        var key = props[index];
        if (allowIndexes && isIndex(key, length) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    var keys = !nativeKeys ? shimKeys : function(object) {
      var Ctor = object == null ? void 0 : object.constructor;
      if (typeof Ctor == "function" && Ctor.prototype === object || typeof object != "function" && isArrayLike(object)) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = length && isLength(length) && (isArray(object) || isArguments(object)) && length || 0;
      var Ctor = object.constructor, index = -1, isProto = typeof Ctor == "function" && Ctor.prototype === object, result = Array(length), skipIndexes = length > 0;
      while (++index < length) {
        result[index] = index + "";
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) && !(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = keys;
  }
});

// node_modules/lodash._baseisequal/index.js
var require_lodash6 = __commonJS({
  "node_modules/lodash._baseisequal/index.js"(exports, module) {
    var isArray = require_lodash();
    var isTypedArray = require_lodash2();
    var keys = require_lodash5();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var stringTag = "[object String]";
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objToString = objectProto.toString;
    function arraySome(array, predicate) {
      var index = -1, length = array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      if (!isLoose) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stackA || (stackA = []);
      stackB || (stackB = []);
      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      stackA.push(object);
      stackB.push(other);
      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);
      stackA.pop();
      stackB.pop();
      return result;
    }
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var index = -1, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
        return false;
      }
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index], result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : void 0;
        if (result !== void 0) {
          if (result) {
            continue;
          }
          return false;
        }
        if (isLoose) {
          if (!arraySome(other, function(othValue2) {
            return arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, isLoose, stackA, stackB);
          })) {
            return false;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
          return false;
        }
      }
      return true;
    }
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          return +object == +other;
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case numberTag:
          return object != +object ? other != +other : object == +other;
        case regexpTag:
        case stringTag:
          return object == other + "";
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;
      if (objLength != othLength && !isLoose) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var skipCtor = isLoose;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key], result = customizer ? customizer(isLoose ? othValue : objValue, isLoose ? objValue : othValue, key) : void 0;
        if (!(result === void 0 ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
          return false;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (!skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    module.exports = baseIsEqual;
  }
});

// node_modules/lodash._bindcallback/index.js
var require_lodash7 = __commonJS({
  "node_modules/lodash._bindcallback/index.js"(exports, module) {
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != "function") {
        return identity;
      }
      if (thisArg === void 0) {
        return func;
      }
      switch (argCount) {
        case 1:
          return function(value) {
            return func.call(thisArg, value);
          };
        case 3:
          return function(value, index, collection) {
            return func.call(thisArg, value, index, collection);
          };
        case 4:
          return function(accumulator, value, index, collection) {
            return func.call(thisArg, accumulator, value, index, collection);
          };
        case 5:
          return function(value, other, key, object, source) {
            return func.call(thisArg, value, other, key, object, source);
          };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }
    function identity(value) {
      return value;
    }
    module.exports = bindCallback;
  }
});

// node_modules/lodash.pairs/index.js
var require_lodash8 = __commonJS({
  "node_modules/lodash.pairs/index.js"(exports, module) {
    var keys = require_lodash5();
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function pairs(object) {
      object = toObject(object);
      var index = -1, props = keys(object), length = props.length, result = Array(length);
      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }
    module.exports = pairs;
  }
});

// node_modules/lodash._basecallback/index.js
var require_lodash9 = __commonJS({
  "node_modules/lodash._basecallback/index.js"(exports, module) {
    var baseIsEqual = require_lodash6();
    var bindCallback = require_lodash7();
    var isArray = require_lodash();
    var pairs = require_lodash8();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;
    var reEscapeChar = /\\(\\)?/g;
    function baseToString(value) {
      return value == null ? "" : value + "";
    }
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == "function") {
        return thisArg === void 0 ? func : bindCallback(func, thisArg, argCount);
      }
      if (func == null) {
        return identity;
      }
      if (type == "object") {
        return baseMatches(func);
      }
      return thisArg === void 0 ? property(func) : baseMatchesProperty(func, thisArg);
    }
    function baseGet(object, path, pathKey) {
      if (object == null) {
        return;
      }
      if (pathKey !== void 0 && pathKey in toObject(object)) {
        path = [pathKey];
      }
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return index && index == length ? object : void 0;
    }
    function baseIsMatch(object, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = toObject(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var result = customizer ? customizer(objValue, srcValue, key) : void 0;
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0], value = matchData[0][1];
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value && (value !== void 0 || key in toObject(object));
        };
      }
      return function(object) {
        return baseIsMatch(object, matchData);
      };
    }
    function baseMatchesProperty(path, srcValue) {
      var isArr = isArray(path), isCommon = isKey(path) && isStrictComparable(srcValue), pathKey = path + "";
      path = toPath(path);
      return function(object) {
        if (object == null) {
          return false;
        }
        var key = pathKey;
        object = toObject(object);
        if ((isArr || !isCommon) && !(key in object)) {
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          key = last(path);
          object = toObject(object);
        }
        return object[key] === srcValue ? srcValue !== void 0 || key in object : baseIsEqual(srcValue, object[key], void 0, true);
      };
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function basePropertyDeep(path) {
      var pathKey = path + "";
      path = toPath(path);
      return function(object) {
        return baseGet(object, path, pathKey);
      };
    }
    function baseSlice(array, start, end) {
      var index = -1, length = array.length;
      start = start == null ? 0 : +start || 0;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end === void 0 || end > length ? length : +end || 0;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    function getMatchData(object) {
      var result = pairs(object), length = result.length;
      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }
    function isKey(value, object) {
      var type = typeof value;
      if (type == "string" && reIsPlainProp.test(value) || type == "number") {
        return true;
      }
      if (isArray(value)) {
        return false;
      }
      var result = !reIsDeepProp.test(value);
      return result || object != null && value in toObject(object);
    }
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }
    function toPath(value) {
      if (isArray(value)) {
        return value;
      }
      var result = [];
      baseToString(value).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    }
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : void 0;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function identity(value) {
      return value;
    }
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }
    module.exports = baseCallback;
  }
});

// node_modules/lodash._baseeach/index.js
var require_lodash10 = __commonJS({
  "node_modules/lodash._baseeach/index.js"(exports, module) {
    var keys = require_lodash5();
    var MAX_SAFE_INTEGER = 9007199254740991;
    var baseEach = createBaseEach(baseForOwn);
    var baseFor = createBaseFor();
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          return eachFunc(collection, iteratee);
        }
        var index = fromRight ? length : -1, iterable = toObject(collection);
        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var iterable = toObject(object), props = keysFunc(object), length = props.length, index = fromRight ? length : -1;
        while (fromRight ? index-- : ++index < length) {
          var key = props[index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    var getLength = baseProperty("length");
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    module.exports = baseEach;
  }
});

// node_modules/lodash._basefind/index.js
var require_lodash11 = __commonJS({
  "node_modules/lodash._basefind/index.js"(exports, module) {
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection2) {
        if (predicate(value, key, collection2)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }
    module.exports = baseFind;
  }
});

// node_modules/lodash._basefindindex/index.js
var require_lodash12 = __commonJS({
  "node_modules/lodash._basefindindex/index.js"(exports, module) {
    function baseFindIndex(array, predicate, fromRight) {
      var length = array.length, index = fromRight ? length : -1;
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    module.exports = baseFindIndex;
  }
});

// node_modules/lodash.find/index.js
var require_lodash13 = __commonJS({
  "node_modules/lodash.find/index.js"(exports, module) {
    var baseCallback = require_lodash9();
    var baseEach = require_lodash10();
    var baseFind = require_lodash11();
    var baseFindIndex = require_lodash12();
    var isArray = require_lodash();
    function createFind(eachFunc, fromRight) {
      return function(collection, predicate, thisArg) {
        predicate = baseCallback(predicate, thisArg, 3);
        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, fromRight);
          return index > -1 ? collection[index] : void 0;
        }
        return baseFind(collection, predicate, eachFunc);
      };
    }
    var find = createFind(baseEach);
    module.exports = find;
  }
});

// node_modules/emoji-flags/index.js
var require_emoji_flags = __commonJS({
  "node_modules/emoji-flags/index.js"(exports, module) {
    var data = require_data();
    var find = require_lodash13();
    var methods = {
      countryCode: function(countryCode) {
        if (!countryCode) {
          throw new Error("Expected 1 country code as the first argument");
        }
        return find(data, function(country) {
          return country.code === countryCode.toUpperCase();
        });
      },
      get data() {
        return data;
      }
    };
    ["emoji", "code", "name", "unicode"].forEach(function(prop) {
      Object.defineProperty(methods, prop + "s", {
        get: function() {
          return data.map(function(country) {
            return country[prop];
          });
        }
      });
    });
    data.forEach(function(prop, index) {
      methods[prop.code] = data[index];
    });
    module.exports = methods;
  }
});
export default require_emoji_flags();
//# sourceMappingURL=emoji-flags.js.map
